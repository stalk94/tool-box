import React, { useState } from "react";
import { Box, BoxProps, useTheme, alpha, darken, SxProps } from "@mui/material";
import { NavLinkItem } from '../menu/type';
import BaseLeftSideBar from "./left-nav";


export type SideBarAndToolPanelProps = {
    /** —Å–ª–æ—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ */
    schemaNavBar: {
        items: NavLinkItem[]
        /** –Ω–∏–∂–Ω—è—è —Å—É–±–ø–∞–Ω–µ–ª—å–∫–∞, –≤—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö –±–∞–∑–æ–≤–æ–π */
        end?: NavLinkItem[]
    }
    /** ‚¨áÔ∏è –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å–∫–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤(tool) */
    end?: React.ReactNode
    /** ‚¨ÜÔ∏è –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å–∫–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤(tool) */
    start?: React.ReactNode
    /** üíª –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏(–ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å) */
    children: React.ReactNode
    /** üî• –Ω–∞–∂–∞—Ç —ç–ª–µ–º–µ–Ω—Ç –±–æ–∫–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */
    onChangeNavigation?: (item: NavLinkItem)=> void
    /** üìè –®–∏—Ä–∏–Ω–∞ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ (–±–µ–∑ —É—á–µ—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏) */
    width?: string | number
    /** –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è –æ–±—à–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
    sx: SxProps
}



/**
 * –≠—Ç–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è `<LeftSideBar>`   
 * –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ —Å–≤—è–∑–∞–Ω—ã–º –ø–æ–ª–µ–º —Å–ø—Ä–∞–≤–∞  
 * 
 * –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª–∂–Ω–æ:  
 * - –ø–æ–¥–∞–µ–º `schemaNavBar`
 * - —Å–ª—É—à–∞–µ–º `onChangeNavigation`
 * - –º–µ–Ω—è–µ–º `children`
 */
export default function SideBarAndToolPanel({ schemaNavBar, start, end, children, onChangeNavigation, ...props }: SideBarAndToolPanelProps) {
    const theme = useTheme();
    

    const useBackgroundColor =()=> {
        const mainColor = theme.palette.toolNavBar.main;
        return darken(mainColor, 0.1);
    }
    const useTopOrEndColor =(type: 'start' | 'end')=> {
        const color = theme.palette?.toolNavBar?.[type];

        if(!color) {
            const bcgColor = useBackgroundColor();
            return darken(bcgColor, 0.1);
        }
    }

    return(
        <Box component='div'
            sx={{
                display: 'flex',
                flexDirection: 'row',
                maxHeight: '100%',
                minWidth: 50,
                overflow: 'hidden',
                ...props.sx
            }}
        >
            {/* ANCHOR - –ª–µ–≤–æ–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é */}
            <BaseLeftSideBar
                type="drawer"
                collapsed={true}
                onChange={onChangeNavigation}
                items={schemaNavBar.items}
                isFocusSelected={true}
                end={schemaNavBar.end}
                selected={props.selected}
            />

            {/* ANCHOR - —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å */}
            { children &&
                <Box
                    sx={{
                        width: props.width ?? '100%',
                        height: '100%',
                        display: 'flex',
                        flexDirection: 'column',
                        backgroundColor: useBackgroundColor(),
                        border: `1px solid ${darken(theme.palette.divider, 0.3)}`,
                        borderLeft: 'none',
                        boxShadow: "inset 3px 0 5px rgba(0, 0, 0, 0.15)",
                        overflowY: "auto",
                        ...theme.mixins?.scrollbar
                    }}
                >
                    {/* –≤–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ */}
                    <Box 
                        sx={{
                            position: "sticky",
                            top: 0,
                            zIndex: 10,
                            textAlign: 'center',
                            background: useTopOrEndColor('start'),
                        }}
                    >
                        { start }
                    </Box>

                    { children }

                    {/* –Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ */}
                    <Box 
                        sx={{
                            position: "sticky",
                            bottom: 0,
                            zIndex: 10,
                            marginTop: 'auto',
                            textAlign: 'center',
                            background: useTopOrEndColor('end'),
                        }}
                    >
                        { end }
                    </Box>
                </Box>
            }           
        </Box>
    );
}